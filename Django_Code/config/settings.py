"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-ua!dw$j3x!nd6eh+d)gje2#mce05=0j5s88w@mhb^3&h#fidmz"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "frontapp",
    "mainapp",
    
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

### (추가 사항) Django 서버 내 페이지에서 자체 백엔드 페이지를 iframe으로 보여주기 설정
X_FRAME_OPTIONS = "SAMEORIGIN"

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    },
    
    ### MySQL 접속 정보 추가하기
    # - 'mysql'  : 각 app에서 DB에 접속하기 위한 key값 (임의 지정 가능)
    # - 'ENGINE' : django에서 DB연결을 컨트롤하는 라이브러리 지정
    #            : mysqlclient 라이브러리 설치 필요(pip install mysqlclient)
    # - 'NAME'   : DB이름
    
    'mysql' : {
        'ENGINE' : 'django.db.backends.mysql',
        'NAME' : 'team3db',
        'USER' : 'team3',
        'PASSWORD' : 'dbdb',
        'HOST' : 'localhost',
        'PORT' : '3306'
        
    }
}

### 각 App에서 DB를 사용할 수 있도록 연결 설정을 해야함
# - 서버가 구동될 때 각 APP에서 자동으로 연결됨
# - 자동으로 연결할 APP 등록을 해야함
# - 작성 규칙 : 앱이름.router파일명.DBrouter클래스명
#               (파일명과 클래스명은 변경 가능)
# - 연결한 App이 여러 개이면,모두 , 뒤에 적성규칙에 따라 추가하면 된다.               
DATABASE_ROUTERS = [
    'mainapp.router.DBrouter',
]

### Django와 DB와 주고받는 SQL구문을 프롬프트(console)에서 확인 가능
LOGGING = {
    'version' : 1,
    'disable_existing_loggers' : False,
    'handlers' : {
        'console' : {
                'level' : 'DEBUG',
                'class' : 'logging.StreamHandler',
            }
    },
    'loggers' :{
        'django.db.backends' :{
            'handlers' : ['console'],
            'level' : 'DEBUG',
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

### (추가 부분) : 프로트앤드 영역 지정 -> 정적  파일이 위치하는 공간 지정
# - CSS, Javascript, 이미지, 동영상 등등
STATICFILES_DIRS = [BASE_DIR/'static']

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


#####[세션(session) 처리 > 로그인 유지] #############
# - 세션처리 설정 : settings.py에 아래 추가
# - 브라우저가 닫히면 사용자 로그인 정보 삭제하기
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# - django에서 제공하는 session 정보를 이용하기 위해서는
# --> python manage.py makemigrations 실행(app 이름 없이 실행)
# --> python manage.py migrate 실행
# - session 유지 정보는 request 객체에서 관리한다.


CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}